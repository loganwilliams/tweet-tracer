{"version":3,"sources":["components/TweetList.js","App.js","serviceWorker.js","index.js"],"names":["TweetList","props","state","sortBy","hideRepeatedRTs","this","date","tweets","f_tweets","forEach","t","retweeted_status_id","hasOwnProperty","filter","concat","Object","values","activeTweet","id","sort","a","b","moment","full","slice","className","length","format","add","onClick","setState","map","setTweet","created_at","utc","favorite_count","retweet_count","href","screen_name","target","e","stopPropagation","followers_count","friends_count","text","Component","App","data","group","mousing","filterRetweets","filterRetweetId","d3","then","d","retweeted_status_retweet_count","d3a","h","filterFunction","v","push","rows","row","key","get","String","padStart","n","onMouseOver","mouseOver","style","backgroundColor","Math","sqrt","bind","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.633d6fad.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport moment from \"moment\";\n\nexport default class TweetList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sortBy: \"favorite_count\",\n      hideRepeatedRTs: true,\n    };\n  }\n\n  render() {\n    if (!this.props.date) return <div />;\n\n    let tweets = this.props.tweets;\n\n    if (this.state.hideRepeatedRTs) {\n      let f_tweets = {};\n      tweets.forEach((t) => {\n        if (\n          t.retweeted_status_id &&\n          !f_tweets.hasOwnProperty(t.retweeted_status_id)\n        ) {\n          f_tweets[t.retweeted_status_id] = t;\n        }\n      });\n\n      tweets = tweets\n        .filter((t) => !t.retweeted_status_id)\n        .concat(Object.values(f_tweets));\n    } else if (this.props.activeTweet) {\n      tweets = tweets.filter(\n        (t) =>\n          t.retweeted_status_id === this.props.activeTweet ||\n          t.id === this.props.activeTweet\n      );\n    }\n\n    if (this.state.sortBy === \"created_at\") {\n      tweets = tweets.sort(\n        (a, b) => moment(a[this.state.sortBy]) - moment(b[this.state.sortBy])\n      );\n    } else {\n      tweets = tweets.sort(\n        (a, b) => b[this.state.sortBy] - a[this.state.sortBy]\n      );\n    }\n\n    if (!this.props.full) {\n      tweets = tweets.slice(0, 10);\n    }\n\n    return (\n      <div className=\"TweetList\">\n        <div className=\"title\">\n          <div className=\"number\">\n            {tweets.length +\n              \" displayed / \" +\n              this.props.tweets.length +\n              \" total tweets from \" +\n              this.props.date.format(\"YYYY-MM-DD HH:mm\") +\n              \" to \" +\n              moment(this.props.date).add(1, \"h\").format(\"YYYY-MM-DD HH:mm\")}\n          </div>\n        </div>\n        <div className=\"options\">\n          <div\n            className={\n              \"button\" +\n              (this.state.sortBy === \"favorite_count\" ? \" active\" : \"\")\n            }\n            onClick={() => this.setState({ sortBy: \"favorite_count\" })}\n          >\n            Sort by favorites\n          </div>\n\n          <div\n            className={\n              \"button\" +\n              (this.state.sortBy === \"retweet_count\" ? \" active\" : \"\")\n            }\n            onClick={() => this.setState({ sortBy: \"retweet_count\" })}\n          >\n            Sort by RTs\n          </div>\n\n          <div\n            className={\n              \"button\" + (this.state.sortBy === \"created_at\" ? \" active\" : \"\")\n            }\n            onClick={() => this.setState({ sortBy: \"created_at\" })}\n          >\n            Sort by time\n          </div>\n\n          <div\n            className={\"button\" + (this.state.hideRepeatedRTs ? \" active\" : \"\")}\n            onClick={() =>\n              this.setState({ hideRepeatedRTs: !this.state.hideRepeatedRTs })\n            }\n          >\n            Hide repeated RTs?\n          </div>\n        </div>\n\n        {tweets.map((t) => {\n          return (\n            <div\n              className={\n                \"tweet\" +\n                (t.id === this.props.activeTweet ||\n                (t.retweeted_status_id &&\n                  t.retweeted_status_id === this.props.activeTweet)\n                  ? \" active\"\n                  : \"\")\n              }\n              onClick={() =>\n                t.retweeted_status_id\n                  ? this.props.setTweet(t.retweeted_status_id)\n                  : this.props.setTweet(t.id)\n              }\n            >\n              <div className=\"timestamp\">\n                {moment(t.created_at).utc().format(\"HH:mm\")}\n              </div>\n              <div className=\"favs\">{t.favorite_count + \" favs\"}</div>\n              <div className=\"rts\">{t.retweet_count + \" RTs\"}</div>\n              <div className=\"screenname\">\n                <a\n                  href={\"https://twitter.com/\" + t.screen_name}\n                  target=\"blank\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  {t.screen_name +\n                    \" (\" +\n                    t.followers_count +\n                    \"/\" +\n                    t.friends_count +\n                    \")\"}\n                </a>\n              </div>\n              <div className=\"text\">{t.text}</div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as d3a from \"d3-array\";\nimport moment from \"moment\";\nimport TweetList from \"./components/TweetList.js\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: [],\n      group: null,\n      date: null,\n      tweets: [],\n      mousing: true,\n      filterRetweets: false,\n      filterRetweetId: false,\n    };\n  }\n\n  componentDidMount() {\n    d3.csv(\"subset.csv\").then((data) => {\n      data = data.map((d) => ({\n        ...d,\n        retweet_count:\n          d.retweet_count < d.retweeted_status_retweet_count\n            ? d.retweeted_status_retweet_count\n            : d.retweet_count,\n      }));\n\n      let group = d3a.group(data, (d) =>\n        moment(d.created_at).utc().format(\"DDD HH\")\n      );\n\n      this.setState({ data, group });\n    });\n  }\n\n  mouseOver(d, h, tweets) {\n    if (!tweets) {\n      tweets = [];\n    }\n\n    this.setState({\n      tweets,\n      date: moment(d + \" \" + h, \"DDD HH\"),\n    });\n  }\n\n  setTweet(id) {\n    if (id === this.state.filterRetweetId) {\n      this.setState({ filterRetweetId: false });\n    } else {\n      this.setState({ filterRetweetId: id });\n    }\n  }\n\n  render() {\n    if (!this.state.group)\n      return <div>Loading, this could take several minutes.</div>;\n\n    let filterFunction = (v) => {\n      if (this.state.filterRetweetId) {\n        return +v.retweeted_status_id === +this.state.filterRetweetId;\n      } else if (this.state.filterRetweets) {\n        return !v.retweeted_status_id;\n      } else {\n        return true;\n      }\n    };\n\n    // find maximum\n    let values = [];\n    this.state.group.forEach((tweets) => {\n      tweets = tweets.filter(filterFunction);\n      values.push(tweets.length);\n    });\n\n    // set up scale\n    let colorScale = (v) =>\n      d3.interpolateViridis(Math.sqrt(v / d3.max(values)));\n\n    let rows = [];\n\n    for (let d = 248; d < 256; d++) {\n      let row = [\n        <div className=\"label\" key=\"label\">\n          {moment(d, \"DDD\").format(\"MMM Do\")}\n        </div>,\n      ];\n\n      for (let h = 0; h < 24; h++) {\n        let tweets = this.state.group.get(d + \" \" + String(h).padStart(2, \"0\"));\n        tweets = tweets ? tweets : [];\n\n        tweets = tweets.filter(filterFunction);\n\n        let n = tweets.length;\n\n        row.push(\n          <div\n            key={h + d}\n            className={\n              \"val\" +\n              (!this.state.mousing &&\n              this.state.date.format() ===\n                moment(d + \" \" + h, \"DDD HH\").format()\n                ? \" active\"\n                : \"\")\n            }\n            onMouseOver={() =>\n              this.state.mousing ? this.mouseOver(d, h, tweets) : null\n            }\n            onClick={() => {\n              this.mouseOver(d, h, tweets);\n              this.setState({ mousing: !this.state.mousing });\n            }}\n            style={{ backgroundColor: n === 0 ? \"black\" : colorScale(n) }}\n          ></div>\n        );\n      }\n\n      rows.push(\n        <div className=\"row\" key={d}>\n          {row}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"left\">\n          <div className=\"options\">\n            <div className=\"title\">Visualization of tweet dataset</div>\n            <div\n              className={\n                \"button\" + (this.state.filterRetweets ? \" active\" : \"\")\n              }\n              onClick={() =>\n                this.setState({\n                  filterRetweets: !this.state.filterRetweets,\n                })\n              }\n            >\n              Filter out retweets\n            </div>\n            {this.state.filterRetweetId ? (\n              <div\n                className=\"button\"\n                onClick={() => this.setState({ filterRetweetId: false })}\n              >\n                View all tweets\n              </div>\n            ) : null}\n          </div>\n          <div className=\"viz\">{rows}</div>\n        </div>\n        <div className=\"right\">\n          <TweetList\n            full={!this.state.mousing}\n            tweets={this.state.tweets}\n            date={this.state.date}\n            setTweet={this.setTweet.bind(this)}\n            activeTweet={this.state.filterRetweetId}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}